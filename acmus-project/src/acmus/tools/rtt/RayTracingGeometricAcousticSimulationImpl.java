package acmus.tools.rtt;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;
/*
 * unused imports ...
 * import java.util.HashMap;
 * import java.util.Iterator;
 */

import org.eclipse.swt.widgets.ProgressBar;

import acmus.tools.structures.AcousticSource;
import acmus.tools.structures.EnergeticSimulatedImpulseResponse;
import acmus.tools.structures.NormalSector;
import acmus.tools.structures.Ray;
import acmus.tools.structures.SimulatedImpulseResponse;
import acmus.tools.structures.Vector;
/* 
 * unused imports ...
 * import acmus.tools.structures.EnergeticSimulatedImpulseResponseArray;
 */

public class RayTracingGeometricAcousticSimulationImpl implements GeometricAcousticSimulation {

	private List<NormalSector> sectors;
	private int numberOfRays;
	private AcousticSource soundSource;
	private Vector sphericalReceptorCenter;
	double sphericalReceptorRadius;
	double soundSpeed;
	double airAbsorptionCoeficient;
	double k;
	private SimulatedImpulseResponse simulatedImpulseResponse;
	private float histogramInterval;
	

	public RayTracingGeometricAcousticSimulationImpl(List<NormalSector> sectors,
			AcousticSource soundSource, int numberOfRays, Vector sphericalReceptorCenter,
			double sphericalReceptorRadius, double soundSpeed,
			double airAbsortionCoeficient, int k) {
		this.sectors = sectors;
		this.numberOfRays = numberOfRays;
		this.soundSource = soundSource;
		this.sphericalReceptorCenter = sphericalReceptorCenter;
		this.sphericalReceptorRadius = sphericalReceptorRadius;
		this.soundSpeed = soundSpeed;
		this.airAbsorptionCoeficient = airAbsortionCoeficient;
		this.k = k;
		histogramInterval = 0.00001f;
		
		//interval calculated according to Gomes2008, see Mario h.c.t. Masters dissertation
		simulatedImpulseResponse = new EnergeticSimulatedImpulseResponse(histogramInterval);
	}

	public void simulate(final ProgressBar progressBar) {
		
		// ray tracing of rays generated by sound source
		int i = 0;
		for (; i < numberOfRays; i++) {
			if (i % Math.max(1,(numberOfRays/100)) == 0) {
				progressBar.setSelection((int) (100.0*i/numberOfRays));
			}
			Ray ray = soundSource.generate();
			ray.follow(sphericalReceptorCenter, sphericalReceptorRadius,
					sectors, soundSpeed, airAbsorptionCoeficient, k,
					simulatedImpulseResponse);
		}// ends tracing of rays
	}

	public SimulatedImpulseResponse getSimulatedImpulseResponse() {
		return simulatedImpulseResponse;
	}

	public void lista() throws IOException {
		FileWriter fw = new FileWriter("/tmp/hist.txt");
		StringBuilder sx = new StringBuilder(2000);
		StringBuilder sy = new StringBuilder(2000);
		StringBuilder ss = new StringBuilder(2000);

		for (Map.Entry<Float, Float> e : getSimulatedImpulseResponse().getEnergeticImpulseResponse().entrySet()) {
			sx.append(e.getKey());
			sx.append(" ");
			sy.append(e.getValue());
			sy.append(" ");

			ss.append(e.getKey());
			ss.append("\t");
			ss.append(e.getValue());
			ss.append("\n");

		}
		// fw.write("x=[" + sx.toString() + "0]; y=[" + sy.toString() + "0]");
		fw.write(ss.toString());
		fw.close();
	}
}
